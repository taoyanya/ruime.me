<canvas
  id="redPricot"
  class="fixed z-[-99] w-screen h-screen top-0 left-0 font-cn"
>
  一支红杏出墙来
</canvas>

<script>
  interface Point {
    x: number;
    y: number;
  }

  const size = {
    width: window.innerWidth,
    height: window.innerHeight,
  };

  class RedApricot {
    ctx: CanvasRenderingContext2D;
    maxCount: number;
    curCount: number;
    width: number;
    startPoint: Point;

    constructor() {
      const canvas = document.querySelector("#redPricot") as HTMLCanvasElement;
      canvas.setAttribute("width", `${size.width}px`);
      canvas.setAttribute("height", `${size.height}px`);
      this.ctx = canvas.getContext("2d")!;
      this.maxCount = 45;
      this.curCount = 0;
      this.width = 5;
      this.startPoint = {
        x: 0,
        y: 350,
      };
    }

    draw() {
      if (this.curCount === this.maxCount) {
        return;
      }
      this.drawLine();
      if (this.curCount >= 10) {
        this.drawFlower();
      }
      this.curCount++;
      requestAnimationFrame(() => {
        setTimeout(() => {
          this.draw();
        }, 100);
      });
    }

    drawLine() {
      const length = this.randomNum(8, 15);
      const _endPoint = this.getTargetPoint(length);

      const _ctx = this.ctx;
      const _startPoint = this.startPoint;
      _ctx.beginPath();
      _ctx.moveTo(_startPoint.x, _startPoint.y);
      _ctx.lineCap = "round";
      _ctx.lineWidth = this.width;
      _ctx.lineTo(_endPoint.x, _endPoint.y);
      _ctx.strokeStyle = "rgb(128,128,128)";
      _ctx.stroke();

      this.startPoint.x = _endPoint.x;
      this.startPoint.y = _endPoint.y;
      this.width -= 0.1;
    }

    drawFlower() {
      const _ctx = this.ctx;
      const _startPoint = this.startPoint;
      _ctx.beginPath();
      _ctx.arc(
        _startPoint.x + this.randomNum(-5, 5),
        _startPoint.y + this.randomNum(-5, 5),
        this.randomNum(1, 3),
        0,
        Math.PI * 2
      );
      _ctx.strokeStyle = "#fecdd3";
      _ctx.fillStyle = "#fecdd3";
      _ctx.fill();
      _ctx.stroke();
    }

    randomNum(min: number, max: number) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    randomAngle() {
      const denominator = this.randomNum(4, 10);
      // const numerator = this.randomNum(1, 2);
      return -(1 / denominator) * Math.PI;
    }

    getTargetPoint(length: number) {
      const angle = this.randomAngle();
      const x = length * Math.cos(angle) + this.startPoint.x;
      const y = length * Math.sin(angle) + this.startPoint.y;
      return {
        x,
        y,
      };
    }
  }

  const redApricot = new RedApricot();
  redApricot.draw();
</script>
